# Generated by Django 4.2.7 on 2024-01-04 21:10

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import re
import sistema.validator


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        max_length=254,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(
                                    "^[a-z0-9._]+@[a-z]+\\.([a-z]{3,})(\\.[a-z]{2,})?$",
                                    2,
                                ),
                                "Enter a valid email.",
                                "invalid",
                            )
                        ],
                        verbose_name="email address",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that cpf already exists."
                        },
                        help_text="Required. example format: 111.111.111-11",
                        max_length=14,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(
                                    "^[0-9]{3}\\.[0-9]{3}\\.[0-9]{3}\\-[0-9]{2}$"
                                ),
                                "Enter a valid cpf.",
                                "invalid",
                            )
                        ],
                        verbose_name="Cpf",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-zá-ú\\s]+$", 2),
                                "Enter a valid full_name.",
                                "invalid",
                            )
                        ],
                        verbose_name="full name",
                    ),
                ),
                (
                    "telefone",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(
                                    "^\\(?[0-9]{2}\\)?[\\s]?[9]?[0-9]{4}[-]?[0-9]{4}$"
                                ),
                                "Enter a valid telefone.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "nascimento",
                    models.DateField(
                        blank=True,
                        default=None,
                        null=True,
                        validators=[sistema.validator.validate_nascimento],
                    ),
                ),
                (
                    "idade",
                    models.PositiveIntegerField(blank=True, default=None, null=True),
                ),
                (
                    "estado",
                    models.CharField(blank=True, default="", max_length=2, null=True),
                ),
                (
                    "cidade",
                    models.CharField(blank=True, default="", max_length=50, null=True),
                ),
                (
                    "rua",
                    models.CharField(blank=True, default="", max_length=50, null=True),
                ),
                (
                    "numero",
                    models.PositiveIntegerField(blank=True, default=None, null=True),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "custom user",
                "verbose_name_plural": "custom users",
            },
        ),
    ]
